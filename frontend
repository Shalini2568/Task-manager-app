import React, { useState, useEffect } from 'react';
import { Plus, Check, Trash2, Clock, CheckCircle2 } from 'lucide-react';

const API_URL = 'http://localhost:8000';

export default function TaskManager() {
  const [tasks, setTasks] = useState([]);
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [filter, setFilter] = useState('all');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    fetchTasks();
  }, [filter]);

  const fetchTasks = async () => {
    try {
      setLoading(true);
      const url = filter === 'all' 
        ? `${API_URL}/tasks` 
        : `${API_URL}/tasks?status=${filter}`;
      
      const response = await fetch(url);
      if (!response.ok) throw new Error('Failed to fetch tasks');
      
      const data = await response.json();
      setTasks(data.tasks || []);
      setError('');
    } catch (err) {
      setError('Unable to connect to backend. Make sure the server is running on port 8000.');
      setTasks([]);
    } finally {
      setLoading(false);
    }
  };

  const addTask = async (e) => {
    e.preventDefault();
    if (!title.trim()) return;

    try {
      const response = await fetch(`${API_URL}/tasks`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title, description })
      });

      if (!response.ok) throw new Error('Failed to add task');

      setTitle('');
      setDescription('');
      fetchTasks();
      setError('');
    } catch (err) {
      setError('Failed to add task. Please try again.');
    }
  };

  const completeTask = async (id) => {
    try {
      const response = await fetch(`${API_URL}/tasks/${id}/complete`, {
        method: 'PUT'
      });

      if (!response.ok) throw new Error('Failed to complete task');

      fetchTasks();
      setError('');
    } catch (err) {
      setError('Failed to complete task. Please try again.');
    }
  };

  const deleteTask = async (id) => {
    try {
      const response = await fetch(`${API_URL}/tasks/${id}`, {
        method: 'DELETE'
      });

      if (!response.ok) throw new Error('Failed to delete task');

      fetchTasks();
      setError('');
    } catch (err) {
      setError('Failed to delete task. Please try again.');
    }
  };

  const pendingTasks = tasks.filter(t => !t.completed);
  const completedTasks = tasks.filter(t => t.completed);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8 px-4">
      <div className="max-w-4xl mx-auto">
        <div className="bg-white rounded-2xl shadow-xl overflow-hidden">
          {/* Header */}
          <div className="bg-gradient-to-r from-blue-600 to-indigo-600 px-8 py-6">
            <h1 className="text-3xl font-bold text-white">Task Manager</h1>
            <p className="text-blue-100 mt-1">Organize your work efficiently</p>
          </div>

          {/* Error Message */}
          {error && (
            <div className="mx-8 mt-6 p-4 bg-red-50 border border-red-200 rounded-lg text-red-700">
              {error}
            </div>
          )}

          {/* Add Task Form */}
          <div className="p-8 border-b border-gray-200">
            <form onSubmit={addTask} className="space-y-4">
              <div>
                <input
                  type="text"
                  placeholder="Task title"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition"
                />
              </div>
              <div>
                <textarea
                  placeholder="Task description (optional)"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  rows="3"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition resize-none"
                />
              </div>
              <button
                type="submit"
                className="w-full bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition flex items-center justify-center gap-2"
              >
                <Plus size={20} />
                Add Task
              </button>
            </form>
          </div>

          {/* Filter Tabs */}
          <div className="px-8 pt-6 flex gap-2 border-b border-gray-200">
            {['all', 'pending', 'completed'].map((f) => (
              <button
                key={f}
                onClick={() => setFilter(f)}
                className={`px-6 py-2 font-medium capitalize rounded-t-lg transition ${
                  filter === f
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                }`}
              >
                {f}
              </button>
            ))}
          </div>

          {/* Task Lists */}
          <div className="p-8">
            {loading ? (
              <div className="text-center py-12 text-gray-500">
                Loading tasks...
              </div>
            ) : tasks.length === 0 ? (
              <div className="text-center py-12 text-gray-500">
                No tasks found. Add your first task above!
              </div>
            ) : (
              <div className="space-y-8">
                {(filter === 'all' || filter === 'pending') && pendingTasks.length > 0 && (
                  <div>
                    <div className="flex items-center gap-2 mb-4">
                      <Clock className="text-orange-500" size={20} />
                      <h2 className="text-lg font-semibold text-gray-800">
                        Pending ({pendingTasks.length})
                      </h2>
                    </div>
                    <div className="space-y-3">
                      {pendingTasks.map((task) => (
                        <TaskCard
                          key={task.id}
                          task={task}
                          onComplete={completeTask}
                          onDelete={deleteTask}
                        />
                      ))}
                    </div>
                  </div>
                )}

                {(filter === 'all' || filter === 'completed') && completedTasks.length > 0 && (
                  <div>
                    <div className="flex items-center gap-2 mb-4">
                      <CheckCircle2 className="text-green-500" size={20} />
                      <h2 className="text-lg font-semibold text-gray-800">
                        Completed ({completedTasks.length})
                      </h2>
                    </div>
                    <div className="space-y-3">
                      {completedTasks.map((task) => (
                        <TaskCard
                          key={task.id}
                          task={task}
                          onComplete={completeTask}
                          onDelete={deleteTask}
                        />
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

function TaskCard({ task, onComplete, onDelete }) {
  return (
    <div
      className={`p-4 rounded-lg border-2 transition ${
        task.completed
          ? 'bg-gray-50 border-gray-200'
          : 'bg-white border-gray-200 hover:border-blue-300'
      }`}
    >
      <div className="flex items-start gap-3">
        <button
          onClick={() => !task.completed && onComplete(task.id)}
          disabled={task.completed}
          className={`mt-1 flex-shrink-0 w-6 h-6 rounded-full border-2 flex items-center justify-center transition ${
            task.completed
              ? 'bg-green-500 border-green-500'
              : 'border-gray-300 hover:border-blue-500'
          }`}
        >
          {task.completed && <Check size={16} className="text-white" />}
        </button>
        
        <div className="flex-1 min-w-0">
          <h3
            className={`font-semibold ${
              task.completed
                ? 'text-gray-500 line-through'
                : 'text-gray-800'
            }`}
          >
            {task.title}
          </h3>
          {task.description && (
            <p
              className={`mt-1 text-sm ${
                task.completed ? 'text-gray-400' : 'text-gray-600'
              }`}
            >
              {task.description}
            </p>
          )}
          <p className="mt-2 text-xs text-gray-400">
            Created: {new Date(task.created_at).toLocaleString()}
          </p>
        </div>

        <button
          onClick={() => onDelete(task.id)}
          className="flex-shrink-0 text-gray-400 hover:text-red-500 transition p-1"
        >
          <Trash2 size={18} />
        </button>
      </div>
    </div>
  );
}
